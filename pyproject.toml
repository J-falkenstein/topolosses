[build-system]
requires = ["scikit-build-core", "pybind11"]
build-backend = "scikit_build_core.build"

[project]
name = "topolosses"
version = "0.1.0"
description = "A collection of losses and metrics for topology-preserving image segmentation."
readme = "topolosses/README.md"
authors = [
    { name = "Janek Falkenstein", email = "j.falkenstein@tum.de" }
]
classifiers=[
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python",
        # TODO add more classifiers
]
requires-python = ">=3.8"
# these are downloaded and installed beforehand
dependencies = [
    "torch>=1.9", 
    "scipy",
    "numpy"
]
# other libraries
# eigen3, boost are header only libraries and are not needed later on
# opencv can be bundled into the wheel afterwards with auditwheel repair (for this the needed libraries need to be installed locally) and needs pip install patchelf.

[project.urls]
Repository = "https://github.com/J-falkenstein/topolosses"

[tool.scikit-build]
wheel.packages = ["topolosses"]

[tool.cibuildwheel]
build = ["*-manylinux_*"]
skip = ["*-manylinux_i686"]

manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"

[tool.cibuildwheel.linux]

# TODO adjust to other architectures
before-all = [
    "yum install -y boost-devel python3-devel",
    "pip install 'pybind11[global]'",
    "curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh",
    "bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda",
    "export PATH=/opt/miniconda/bin:$PATH",
    "conda init bash",
    "source ~/.bashrc",
    "conda install -y -c conda-forge opencv",
    "conda install -y anaconda::eigen",
    ]
# opencv can be bundled into the wheel afterwards with auditwheel repair (for this the needed libraries need to be installed locally)
repair-wheel-command = "LD_LIBRARY_PATH=/opt/miniconda/lib:$LD_LIBRARY_PATH auditwheel repair --plat manylinux_2_34_x86_64 -w {dest_dir} {wheel}"
